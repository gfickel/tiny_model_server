# Base config from https://chromium.googlesource.com/external/github.com/grpc/grpc/+/HEAD/.pylintrc-examples

[MASTER]
ignore=
#	my/src/,

; [VARIABLES]
# TODO(https://github.com/PyCQA/pylint/issues/1345): How does the inspection
# not include "unused_" and "ignored_" by default?
; dummy-variables-rgx=^ignored_|^unused_

[DESIGN]
max-args=7

[MESSAGES CONTROL]
disable=
	# TODO(https://github.com/PyCQA/pylint/issues/59#issuecomment-283774279):
	# Enable cyclic-import after a 1.7-or-later pylint release that
	# recognizes our disable=cyclic-import suppressions.
	cyclic-import,
	# NOTE(nathaniel): We don't write doc strings for most private code
	# elements.
	missing-docstring,
	# TODO(https://github.com/grpc/grpc/issues/261): Doesn't yet play
	# nicely with some of our code being implemented in Cython. Maybe in a
	# later version?
	no-name-in-module,
	# TODO(https://github.com/grpc/grpc/issues/261): Suppress these where
	# the odd shape of the authentication portion of the API forces them on
	# us and enable everywhere else.
	protected-access,
	# NOTE(nathaniel): Pylint and I will probably never agree on this.
	too-few-public-methods,
	# NOTE(nathaniel): Pylint and I wil probably never agree on this for
	# private classes. For public classes maybe?
	too-many-instance-attributes,
	# NOTE(nathaniel): Some of our modules have a lot of lines... of
	# specification and documentation. Maybe if this were
	# lines-of-code-based we would use it.
	too-many-lines,
	# TODO(https://github.com/grpc/grpc/issues/261): Maybe we could have
	# this one if we extracted just a few more helper functions...
	too-many-nested-blocks,
	# TODO(https://github.com/grpc/grpc/issues/261): Disable unnecessary
	# super-init requirement for abstract class implementations for now.
	super-init-not-called,
	# NOTE(nathaniel): A single statement that always returns program
	# control is better than two statements the first of which sometimes
	# returns program control and the second of which always returns
	# program control. Probably generally, but definitely in the cases of
	# if:/else: and for:/else:.
	broad-exception-caught,
	useless-else-on-loop,
	no-else-return,
	# NOTE(lidiz): Python 3 make object inheritance default, but not PY2
	useless-object-inheritance,
	# NOTE(lidiz): the import order will be enforced by isort instead
	wrong-import-order,
	# TODO(https://github.com/PyCQA/pylint/issues/3882): Upgrade Pylint
	unsubscriptable-object,
	# NOTE(rbellevi): Pylint doesn't understand .pyi files.
	no-member,